#!/usr/bin/env python

import sys
import os.path
import json
import types
import logging

class json2markdown:

    def __init__(self, out=sys.stdout):
        self.out = out
        self.data = None
        self.hash = 0
        self.splat = 0

    def render(self, data):
        self.parse(data)

    def parse(self, stuff):

        isa = type(stuff)

        if isa == types.DictType:

            self.hash += 1
            self.render_dict(stuff)
            self.hash -= 1

        elif isa == types.ListType:

            self.splat = 1
            self.render_list(stuff)
            self.splat = 0

        else:

            self.render_string(stuff)

    def render_string(self, s):

        self.out.write(unicode(s))

        self.out.write("\n")
        self.out.write("\n")

    def dump(self, s):

        s = json.dumps(s)

        self.out.write("```")
        self.out.write("\n")

        self.render_string(s)

        self.out.write("```")
        self.out.write("\n") 
        self.out.write("\n") 
       
    def render_list(self, s):

        for v in s:
            self.parse(v)
            # self.out.write("--\n")

    def render_dict(self, s):

        for k, v in s.items():

            self.out.write("%s %s" % ("#" * self.hash, k))
            self.out.write("\n\n")

            self.render_dict_item(k, v)

    def render_dict_item(self, k, v):
        self.parse(v)

class geojson2markdown(json2markdown):

    def render_dict_item(self, k, v):

        if k == 'coordinates' or k == 'bbox':
            self.dump(v)
        else:
            self.parse(v)

if __name__ == '__main__':

    import optparse

    parser = optparse.OptionParser()

    parser.add_option('-g', '--geojson', dest='geojson', action='store_true', default=False, help='Treat input as GeoJSON')
    parser.add_option('-r', '--raw', dest='raw', action='store_true', default=False, help='Return raw unparse GeoJSON (default is false)')
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='be chatty (default is false)')

    options, args = parser.parse_args()

    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if options.geojson:
        md = geojson2markdown()
    else:
        md = json2markdown()

    def input(options, args):

        if options.raw:
            data = " ".join(args)
            data = json.loads(data)
            yield data

        else:

            for path in args:
                path = os.path.abspath(path)
                fh = open(path, 'r')
                data = json.load(fh)
                yield data

    for data in input(options, args):
        md.render(data)
    
